library(effects)
library(colorRamps)
plot(allEffects(model),
ylab= "total.injury",
type = "probability",
style = "stacked",
colors=colorRampPalette(c("white","red"))(9))
model <- polr(d.level ~ tp + svl + w + age + sex + species, data = dat, Hess = TRUE, method = "logistic")
summary(model)
plot(allEffects(model),
ylab= "total.injury",
type = "probability",
style = "stacked",
colors=colorRampPalette(c("white","red"))(9))
model <- polr(d.level ~ tp + svl + w + sex + species, data = dat, Hess = TRUE, method = "logistic")
model <- polr(d.level ~ tp + svl + w + species, data = dat, Hess = TRUE, method = "logistic")
summary(model)
plot(allEffects(model),
ylab= "total.injury",
type = "probability",
style = "stacked",
colors=colorRampPalette(c("white","red"))(9))
model <- polr(d.level ~ tp + svl + w, data = dat, Hess = TRUE, method = "logistic")
summary(model)
# plot
plot(allEffects(model),
ylab= "total.injury",
type = "probability",
style = "stacked",
colors=colorRampPalette(c("white","red"))(9))
model <- polr(total.injury ~ tp + svl + w, data = dat, Hess = TRUE, method = "logistic")
model <- polr(as.factor(total.injury) ~ tp + svl + w, data = dat, Hess = TRUE, method = "logistic")
summary(model)
# plot
plot(allEffects(model),
ylab= "total.injury",
type = "probability",
style = "stacked",
colors=colorRampPalette(c("white","red"))(9))
ylab= "total number of injuries on tail",
type = "probability",
style = "stacked",
colors=colorRampPalette(c("white","red"))(9))
plot(allEffects(model),
ylab= "total number of injuries on tail",
type = "probability",
style = "stacked",
colors=colorRampPalette(c("white","red"))(9))
plot(allEffects(model),
ylab= "total.injury",
type = "probability",
style = "stacked",
colors=colorRampPalette(c("white","red"))(9))
plot(allEffects(model),
ylab= "total.injury",
type = "probability",
style = "stacked",
colors=colorRampPalette(c("white","red"))(7))
model.i<- polr(as.factor(total.injury) ~ tp + svl + w, data = dat, Hess = TRUE, method = "logistic")
summary(model.i)
model.d <- polr(d.level ~ tp + svl + w, data = dat, Hess = TRUE, method = "logistic")
summary(model.d)
plot(allEffects(model.d),
ylab= "total.injury",
type = "probability",
style = "stacked",
colors=colorRampPalette(c("white","red"))(4))
model.i<- polr(as.factor(total.injury) ~ tp + svl + w + species, data = dat, Hess = TRUE, method = "logistic")
summary(model.i)
plot(allEffects(model.i),
ylab= "total.injury",
type = "probability",
style = "stacked",
colors=colorRampPalette(c("white","red"))(7))
predict(model.d, newdata = data.frame(tp = newtp, svl = newsvl, w = neww))
predict(model.d, newdata = data.frame(tp = "newtp", svl = "newsvl", w = "neww"))
install.packages("multcomp")
library(multcomp)
d.aov <- aov(d.level ~ tp, data = dat)
anova(d.aov)
d.aov <- aov(total.injury ~ tp, data = dat)
anova(d.aov)
TukeyHSD(d.aov)
summary(model.i)
confint(model.i)
confint(model.d)
predict(model.d, dat)
?predict
p.model <- predict(model.d, dat)
head(p.model)
p.modelscores <- predict(model.d, dat, type = "p")
head(p.modelscores)
table(dat$d.level, p.model)
mean(as.character(dat$d.level) != as.character(p.model))
exp(coef(model.d))
exp(cbind(OR = coef(model.d), ci))
predict(model.d)
library(magrittr)
library(tibble)
library(readr)
library(stringr)
library(dplyr)
library(tidyverse)
library(RColorBrewer)
library(pheatmap)
library(tidyselect)
session.info()
sessionInfo()
setwd("~/Documents/tissue_profiling/salmon_quant/tpm_quant/")
refGenome <- read.table(file = "PMucros_quant_tpm_all.tsv", header = TRUE)
visGenes <- read_csv(file = "refGenomes/PMucros_genelist/PMucros_visGenes5.txt", col_names = FALSE)
names(refGenome)
refGenome <- select(refGenome, Length, GeneName = Name,
HMAJ_testis = TPM,
HMAJ_liver = TPM.1,
HMAJ_heart = TPM.2,
ALA_vno = TPM.3,
ALA_tailA2 = TPM.4,
ATEN_tailA2 = TPM.6,
ATEN_tailB5 = TPM.7,
ATEN_body = TPM.8,
ALA_eye = TPM.5,
BRH_vno = TPM.9,
ALAjuv_body = TPM.12,
ALAjuv_tailA2 = TPM.10,
ALAjuv_tailB5 = TPM.11,
NSC_vno = TPM.13)
setwd("~/Documents/tissue_profiling/salmon_quant/tpm_quant/")
sampleinfo <- read_csv(file = "sample_info_tissues.csv", col_names = TRUE)
names(refGenome)
dgerefGenome <- select(refGenome, GeneName, HMAJ_testis, HMAJ_liver, HMAJ_heart, ALA_tailA2, ATEN_tailB5, ATEN_tailA2,
ATEN_body, ALA_eye, ALAjuv_body, ALAjuv_tailA2, ALAjuv_tailB5)
dgeSkin <- select(refGenome, GeneName,ATEN_tailB5, ALA_tailA2, ATEN_tailA2,
ATEN_body, ALAjuv_body, ALAjuv_tailA2, ALAjuv_tailB5 )
## Turning counts object into DGElist and normalising
dgeSkin %<>% column_to_rownames("GeneName") %>%
as.matrix() %>%
edgeR::DGEList() %>%
edgeR::calcNormFactors()
View(dgerefGenome)
mds <- limma::plotMDS(dgeSkin, gene.selection = "common", method = "logFC")
refGenome <- read.table(file = "tpm_quant/PMucros_quant_tpm_all.tsv", header = TRUE)
refGenome <- read.table(file = "PMucros_quant_tpm_all.tsv", header = TRUE)
sampleinfo <- read_csv(file = "sample_info_tissues.csv", col_names = TRUE)
names(refGenome)
refGenome <- select(refGenome, GeneName = Name,
HMAJ_testis = TPM,
HMAJ_liver = TPM.1,
HMAJ_heart = TPM.2,
ALA_vno = TPM.3,
ALA_tailA2 = TPM.4,
ATEN_tailA2 = TPM.6,
ATEN_tailB5 = TPM.7,
ATEN_body = TPM.8,
ALA_eye = TPM.5,
BRH_vno = TPM.9,
ALAjuv_body = TPM.12,
ALAjuv_tailA2 = TPM.10,
ALAjuv_tailB5 = TPM.11,
NSC_vno = TPM.13)
names(refGenome)
dge <- select(refGenome, GeneName, HMAJ_testis, HMAJ_liver, HMAJ_heart, ALA_tailA2, ATEN_tailB5, ATEN_tailA2,
ATEN_body, ALA_eye, ALAjuv_body, ALAjuv_tailA2, ALAjuv_tailB5)
dge %<>% column_to_rownames("GeneName") %>%
as.matrix() %>%
edgeR::DGEList() %>%
edgeR::calcNormFactors()
mds <- limma::plotMDS(dgeSkin, gene.selection = "common", method = "logFC")
mds <- limma::plotMDS(dge, gene.selection = "common", method = "logFC")
plot <- mds@.Data[[3]] %>%
as.data.frame() %>%
rownames_to_column("group") %>%
set_colnames(c("group","x","y")) %>%
left_join(sampleinfo, by = c("group"="gene_id"))
View(plot)
plot %>%
ggplot(aes(x, y, colour = species, shape = species, label = tissue)) +
geom_point(size = 4) +
geom_text(hjust = 0, nudge_x = 0.2, check_overlap = TRUE) +
theme_bw(base_size = 16) +
theme(legend.text = element_text(size = 12)) +
labs(x = "Dimension 1",
y=  "Dimension 2")
?plotMDS
?calcnormfactors
?limma
?edgeR
sessionInfo()
library(limma)
?plotMDS
plot %>%
ggplot(aes(x, y, colour = species, shape = species, label = tissue)) +
geom_point(size = 4) +
geom_text(hjust = 0, nudge_x = 0.2, check_overlap = TRUE) +
theme_bw(base_size = 16) +
theme(legend.text = element_text(size = 12)) +
labs(x = "Dimension 1",
y=  "Dimension 2") +
guides(fill=guide_legend(title="New Legend Title"))
plot %>%
ggplot(aes(x, y, colour = species, shape = species, label = tissue)) +
geom_point(size = 4) +
geom_text(hjust = 0, nudge_x = 0.2, check_overlap = TRUE) +
theme_bw(base_size = 16) +
theme(legend.text = element_text(size = 12)) +
labs(x = "Dimension 1",
y=  "Dimension 2") +
scale_fill_discrete(name = "New Legend Title")
plot %>%
ggplot(aes(x, y, colour = species, shape = species, label = tissue)) +
geom_point(size = 4) +
geom_text(hjust = 0, nudge_x = 0.2, check_overlap = TRUE) +
theme_bw(base_size = 16) +
theme(legend.text = element_text(size = 12), legend.title = "Species") +
labs(x = "Dimension 1",
y=  "Dimension 2")
plot %>%
ggplot(aes(x, y, colour = species, shape = species, label = tissue)) +
geom_point(size = 4) +
geom_text(hjust = 0, nudge_x = 0.2, check_overlap = TRUE) +
theme_bw(base_size = 16) +
theme(title = "Species", legend.text = element_text(size = 12)) +
labs(x = "Dimension 1",
y=  "Dimension 2")
#dev.off()
View(sampleinfo)
sampleinfo <- read_csv(file = "sample_info_tissues.csv", col_names = TRUE)
dge %<>% column_to_rownames("GeneName") %>%
as.matrix() %>%
edgeR::DGEList() %>%
edgeR::calcNormFactors()
dge <- select(refGenome, GeneName, HMAJ_testis, HMAJ_liver, HMAJ_heart, ALA_tailA2, ATEN_tailB5, ATEN_tailA2,
ATEN_body, ALA_eye, ALAjuv_body, ALAjuv_tailA2, ALAjuv_tailB5)
dge %<>% column_to_rownames("GeneName") %>%
as.matrix() %>%
edgeR::DGEList() %>%
edgeR::calcNormFactors()
mds <- limma::plotMDS(dge, gene.selection = "common", method = "logFC")
plot <- mds@.Data[[3]] %>%
as.data.frame() %>%
rownames_to_column("group") %>%
set_colnames(c("group","x","y")) %>%
left_join(sampleinfo, by = c("group"="gene_id"))
plot %>%
ggplot(aes(x, y, colour = Species, shape = Species, label = Tissue)) +
geom_point(size = 4) +
geom_text(hjust = 0, nudge_x = 0.2, check_overlap = TRUE) +
theme_bw(base_size = 16) +
theme(title = "Species", legend.text = element_text(size = 12)) +
labs(x = "Dimension 1",
y=  "Dimension 2")
plot %>%
ggplot(aes(x, y, colour = Species, shape = Species, label = Tissue)) +
geom_point(size = 4) +
geom_text(hjust = 0, nudge_x = 0.2, check_overlap = TRUE) +
theme_bw(base_size = 16) +
theme(legend.text = element_text(size = 12)) +
labs(x = "Dimension 1",
y=  "Dimension 2")
plot %>%
ggplot(aes(x, y, colour = Species, shape = Species)) +
geom_point(size = 4) +
geom_text(hjust = 0, nudge_x = 0.2, check_overlap = TRUE) +
theme_bw(base_size = 16) +
theme(legend.text = element_text(size = 12)) +
labs(x = "Dimension 1",
y=  "Dimension 2")
plot %>%
ggplot(aes(x, y, colour = Species, shape = Species, label = Tissue)) +
geom_point(size = 4) +
geom_text(hjust = 0, nudge_x = 0.2, check_overlap = TRUE) +
theme_bw(base_size = 16) +
theme(legend.text = element_text(size = 12)) +
labs(x = "Dimension 1",
y=  "Dimension 2")
plot %>%
ggplot(aes(x, y, colour = Seq_year, shape = Species, label = Tissue)) +
geom_point(size = 4) +
geom_text(hjust = 0, nudge_x = 0.2, check_overlap = TRUE) +
theme_bw(base_size = 16) +
theme(legend.text = element_text(size = 12)) +
labs(x = "Dimension 1",
y=  "Dimension 2")
??ggsave
?ggsave
plot %>%
ggplot(aes(x, y, colour = Species, shape = Species, label = Tissue)) +
geom_point(size = 3) +
geom_text(hjust = 0, nudge_x = 0.2, check_overlap = TRUE) +
theme_bw(base_size = 16) +
theme(legend.text = element_text(size = 12)) +
labs(x = "Dimension 1",
y=  "Dimension 2")
plot %>%
ggplot(aes(x, y, colour = Species, shape = Species, label = Tissue)) +
geom_point(size = 1) +
geom_text(hjust = 0, nudge_x = 0.2, check_overlap = TRUE) +
theme_bw(base_size = 16) +
theme(legend.text = element_text(size = 12)) +
labs(x = "Dimension 1",
y=  "Dimension 2")
#pdf(file = "plots/MDS_refGenome.pdf")
plot %>%
ggplot(aes(x, y, colour = Species, shape = Species, label = Tissue)) +
geom_point(size = 4) +
geom_text(hjust = 0, nudge_x = 0.2, check_overlap = TRUE) +
theme_bw(base_size = 16) +
theme(legend.text = element_text(size = 12)) +
labs(x = "Dimension 1",
y=  "Dimension 2")
plot %>%
ggplot(aes(x, y, colour = Species, shape = Species, label = Tissue)) +
geom_point(size = 4) +
geom_text(hjust = 0, nudge_x = 0.1, check_overlap = TRUE) +
theme_bw(base_size = 16) +
theme(legend.text = element_text(size = 12)) +
labs(x = "Dimension 1",
y=  "Dimension 2")
plot %>%
ggplot(aes(x, y, colour = Species, shape = Species, label = Tissue)) +
geom_point(size = 4) +
geom_text(hjust = 0, nudge_x = 0.5, check_overlap = TRUE) +
theme_bw(base_size = 16) +
theme(legend.text = element_text(size = 12)) +
labs(x = "Dimension 1",
y=  "Dimension 2")
plot %>%
ggplot(aes(x, y, colour = Species, shape = Species, label = Tissue)) +
geom_point(size = 4) +
geom_text(hjust = 0, nudge_x = 0.2, check_overlap = TRUE) +
theme_bw(base_size = 10) +
theme(legend.text = element_text(size = 12)) +
labs(x = "Dimension 1",
y=  "Dimension 2")
plot %>%
ggplot(aes(x, y, colour = Species, shape = Species, label = Tissue)) +
geom_point(size = 4) +
geom_text(hjust = 0, nudge_x = 0.2, check_overlap = TRUE) +
theme_bw(base_size = 5) +
theme(legend.text = element_text(size = 12)) +
labs(x = "Dimension 1",
y=  "Dimension 2")
plot %>%
ggplot(aes(x, y, colour = Species, shape = Species, label = Tissue)) +
geom_point(size = 4) +
geom_text(hjust = 0, nudge_x = 0.2, check_overlap = TRUE) +
theme_bw(base_size = 15) +
theme(legend.text = element_text(size = 12)) +
labs(x = "Dimension 1",
y=  "Dimension 2")
?geom_text
plot %>%
ggplot(aes(x, y, colour = Species, shape = Species, label = Tissue)) +
geom_point(size = 4) +
geom_text(hjust = 0, nudge_x = 0.1, check_overlap = TRUE) +
theme_bw(base_size = 15) +
theme(legend.text = element_text(size = 12)) +
labs(x = "Dimension 1",
y=  "Dimension 2")
?plotMDS
mds <- limma::plotMDS(dge, gene.selection = "pairwise", method = "logFC")
plot <- mds@.Data[[3]] %>%
as.data.frame() %>%
rownames_to_column("group") %>%
set_colnames(c("group","x","y")) %>%
left_join(sampleinfo, by = c("group"="gene_id"))
plot %>%
ggplot(aes(x, y, colour = Species, shape = Species, label = Tissue)) +
geom_point(size = 4) +
geom_text(hjust = 0, nudge_x = 0.1, check_overlap = TRUE) +
theme_bw(base_size = 15) +
theme(legend.text = element_text(size = 12)) +
labs(x = "Dimension 1",
y=  "Dimension 2")
mds <- limma::plotMDS(dge, gene.selection = "common", method = "logFC")
## Slightly ganky way of doing this, but extracting MDS coordinate object and joining with sample information.
plot <- mds@.Data[[3]] %>%
as.data.frame() %>%
rownames_to_column("group") %>%
set_colnames(c("group","x","y")) %>%
left_join(sampleinfo, by = c("group"="gene_id"))
## Plotting MDS using ggplot (nicer plot), includes overlap of experimental condition and species
#pdf(file = "plots/MDS_refGenome.pdf")
plot %>%
ggplot(aes(x, y, colour = Species, shape = Species, label = Tissue)) +
geom_point(size = 4) +
geom_text(hjust = 0, nudge_x = 0.1, check_overlap = TRUE) +
theme_bw(base_size = 15) +
theme(legend.text = element_text(size = 12)) +
labs(x = "Dimension 1",
y=  "Dimension 2")
ggsave("MDSplot_allsamples.jpeg", width = 12, height = 8)
ggsave("/clustering/MDSplot_allsamples.jpeg", width = 12, height = 8)
ggsave("/clustering/MDSplot_allsamples.jpeg", width = 8, height = 10)
ggsave("clustering/MDSplot_allsamples.jpeg", width = 8, height = 10)
ggsave("clustering/MDSplot_allsamples.jpeg", width = 5, height = 8)
ggsave("clustering/MDSplot_allsamples.jpeg", width = 8, height = 8.5)
dgeSkin <- select(refGenome, GeneName,ATEN_tailB5, ALA_tailA2, ATEN_tailA2,
ATEN_body, ALAjuv_body, ALAjuv_tailA2, ALAjuv_tailB5 )
dgeSkin %<>% column_to_rownames("GeneName") %>%
as.matrix() %>%
edgeR::DGEList() %>%
edgeR::calcNormFactors()
mds <- limma::plotMDS(dgeSkin, gene.selection = "common", method = "logFC")
mdsSkin <- limma::plotMDS(dgeSkin, gene.selection = "common", method = "logFC")
plot <- mdsSkin@.Data[[3]] %>%
as.data.frame() %>%
rownames_to_column("group") %>%
set_colnames(c("group","x","y")) %>%
left_join(sampleinfo, by = c("group"="gene_id"))
plotSkin <- mdsSkin@.Data[[3]] %>%
as.data.frame() %>%
rownames_to_column("group") %>%
set_colnames(c("group","x","y")) %>%
left_join(sampleinfo, by = c("group"="gene_id"))
plotSkin %>%
ggplot(aes(x, y, colour = Species, shape = Species, label = Tissue)) +
geom_point(size = 4) +
geom_text(hjust = 0, nudge_x = 0.1, check_overlap = TRUE) +
theme_bw(base_size = 15) +
theme(legend.text = element_text(size = 12)) +
labs(x = "Dimension 1",
y=  "Dimension 2")
ggplot(aes(x, y, colour = Species, shape = Species, label = experiment)) +
geom_point(size = 4) +
geom_text(hjust = 0, nudge_x = 0.1, check_overlap = TRUE) +
theme_bw(base_size = 15) +
theme(legend.text = element_text(size = 12)) +
labs(x = "Dimension 1",
y=  "Dimension 2")
plotSkin %>%
ggplot(aes(x, y, colour = Species, shape = Species, label = experiment)) +
geom_point(size = 4) +
geom_text(hjust = 0, nudge_x = 0.1, check_overlap = TRUE) +
theme_bw(base_size = 15) +
theme(legend.text = element_text(size = 12)) +
labs(x = "Dimension 1",
y=  "Dimension 2")
plotSkin %>%
ggplot(aes(x, y, colour = experiment, shape = Species, label = experiment)) +
geom_point(size = 4) +
geom_text(hjust = 0, nudge_x = 0.1, check_overlap = TRUE) +
theme_bw(base_size = 15) +
theme(legend.text = element_text(size = 12)) +
labs(x = "Dimension 1",
y=  "Dimension 2")
plotSkin %>%
ggplot(aes(x, y, colour = experiment, shape = Species, label = Tissue)) +
geom_point(size = 4) +
geom_text(hjust = 0, nudge_x = 0.1, check_overlap = TRUE) +
theme_bw(base_size = 15) +
theme(legend.text = element_text(size = 12)) +
labs(x = "Dimension 1",
y=  "Dimension 2")
dge <- select(refGenome, GeneName, HMAJ_testis, HMAJ_liver, HMAJ_heart, ALA_tailA2, ATEN_tailB5, ATEN_tailA2,
ATEN_body, ALA_eye, ALAjuv_body, ALAjuv_tailA2, ALAjuv_tailB5)
## Turning counts object into DGElist and normalising
dge %<>% column_to_rownames("GeneName") %>%
as.matrix() %>%
edgeR::DGEList() %>%
edgeR::calcNormFactors()
## Obtaining MDS data object
mds <- limma::plotMDS(dge, gene.selection = "common", method = "logFC")
## Slightly ganky way of doing this, but extracting MDS coordinate object and joining with sample information.
plot <- mds@.Data[[3]] %>%
as.data.frame() %>%
rownames_to_column("group") %>%
set_colnames(c("group","x","y")) %>%
left_join(sampleinfo, by = c("group"="gene_id"))
## Plotting MDS using ggplot (nicer plot), includes overlap of experimental condition and species
#pdf(file = "plots/MDS_refGenome.pdf")
plot %>%
ggplot(aes(x, y, colour = Species, shape = Species, label = Tissue)) +
geom_point(size = 4) +
geom_text(hjust = 0, nudge_x = 0.1, check_overlap = TRUE) +
theme_bw(base_size = 15) +
theme(legend.text = element_text(size = 12)) +
labs(x = "Dimension 1",
y=  "Dimension 2")
plotgg %<>%
ggplot(aes(x, y, colour = Species, shape = Species, label = Tissue)) +
geom_point(size = 4) +
geom_text(hjust = 0, nudge_x = 0.1, check_overlap = TRUE) +
theme_bw(base_size = 15) +
theme(legend.text = element_text(size = 12)) +
labs(x = "Dimension 1",
y=  "Dimension 2")
plotgg <- plot %>%
ggplot(aes(x, y, colour = Species, shape = Species, label = Tissue)) +
geom_point(size = 4) +
geom_text(hjust = 0, nudge_x = 0.1, check_overlap = TRUE) +
theme_bw(base_size = 15) +
theme(legend.text = element_text(size = 12)) +
labs(x = "Dimension 1",
y=  "Dimension 2")
plotgg + geom_vline(xintercept = 0)
plotgg + geom_vline(xintercept = 0) + geom_hline(yintercept = 0)
plotgg + geom_vline(xintercept = 0, linetype = 3) + geom_hline(yintercept = 0)
plotgg + geom_vline(xintercept = 0, linetype = 3) + geom_hline(yintercept = 0, linetype = 3)
ggsave("clustering/MDSplot_allsamples.jpeg", width = 8, height = 8.5)
theme_classic()
plotgg + geom_vline(xintercept = 0, linetype = 3) +
geom_hline(yintercept = 0, linetype = 3) +
theme_classic()
plotgg + geom_vline(xintercept = 0, linetype = 3) +
geom_hline(yintercept = 0, linetype = 3) +
theme_linedraw()
plotgg + geom_vline(xintercept = 0, linetype = 3) +
geom_hline(yintercept = 0, linetype = 3) +
theme_linedraw(base_size = 20)
ggsave("clustering/MDSplot_allsamples.jpeg")
?plotMDS
